from hhd.controller import Axis
from hhd.utils import rgb_to_hsb, hsb_to_rgb

DEFAULT_MAPPINGS: dict[str, tuple[Axis, str | None, float, float | None]] = {
    "accel_x": ("accel_z", "accel", 1, None),
    "accel_y": ("accel_x", "accel", -1, None),
    "accel_z": ("accel_y", "accel", -1, None),
    "anglvel_x": ("gyro_z", "anglvel", 1, None),
    "anglvel_y": ("gyro_x", "anglvel", -1, None),
    "anglvel_z": ("gyro_y", "anglvel", -1, None),
    "timestamp": ("imu_ts", None, 1, None),
}

AYA_DEFAULT_CONF = {
    "hrtimer": True,
    "mapping": DEFAULT_MAPPINGS,
}

CONFS = {
    # Ayaneo
    "AYANEO 3": {
        "name": "AYANEO 3",
        "extra_buttons": "quad",
        "rgb": True,
        **AYA_DEFAULT_CONF,
    },
}

AYA3_INIT = [
    "00000b07000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b07010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b07020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b07030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b07040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b07050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b07060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b07070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b07080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b07090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b070a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b070b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "68000b070c0000000000006800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "69000b070d0000000000006900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b070e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b070f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "70000b07100000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "71000b07110000000000007100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "11000b07120002000000000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "17000b07130002000000001500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b07140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b07150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "72000b07160000000000007200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "11000b07170002000008000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "6b000b07180000000000006b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b07190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b071a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b071b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b071c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b071d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b071e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b071f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000b07200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "00000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
]


def pad(data: bytes | list[int], length: int = 64) -> bytes:
    return bytes(data).ljust(length, b"\x00")


def calculate_checksum_inplace(buf: bytes | list[int]):
    data = bytearray(buf)
    data[:2] = sum(data[6:]).to_bytes(2, byteorder="little")
    return pad(data)


def get_cfg_commands(rgb_mode: str, r, g, b):
    match rgb_mode:
        case "disabled":
            mode = 1
            r = g = b = 0
        case "solid":
            mode = 1
        case "pulse":
            mode = 2
        case "rainbow":
            mode = 3
        case _:
            raise ValueError(f"Invalid RGB mode: {rgb_mode}")
    
    h, s, v = rgb_to_hsb(r, g, b)
    h = (h + 10) % 360  # Adjust hue slightly to color correct
    r, g, b = hsb_to_rgb(h, s, v)

    cmd = [
        # Random init bytes
        0xDE,
        0x03,
        # Command
        0x21,
        0x09,
        # Unknown
        0x00,
        0x00,
        0x00,
        # Right RGB, mode, color
        mode,
        r,
        g,
        b,
        # Left RGB, mode, color
        mode,
        r,
        g,
        b,
        # Uknown
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x33,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x01,
        0x00,
        0x00,
        0x00,
        0x00,
        0x64,
        0x64,
    ]
    return [calculate_checksum_inplace(cmd), pad([0x00, 0x00, 0x00, 0x08])]
